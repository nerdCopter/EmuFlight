# Builds the emuflight firmware
#
# After building, artifacts are released to a seperate repository.
#
# Azure Pipelines requires the following extensions to be installed:
# - GitHub Tool: https://marketplace.visualstudio.com/items?itemName=marcelo-formentao.github-tools
#
# You'll also need to setup the follwing pipeline variables:
#     "releaseNotes" - This is used to add the release notes in the windows job in the build stage so they can be published as part of the github release in the release stage
#     "endpoint" - The name of the github endpoint link setup in AzDo - setup when linking AzDo and GitHub 'nerdCopter'
#     "owner" - The owner of the repository to release to e.g. nerdCopter
#     "repoName" - The name of the repository to release to e.g. EmuFlight_nerdCopter


variables:
  endpoint: nerdCopter
  owner: nerdCopter
  repoName: EmuClassic_nerdCopter
  releaseNotes: |+
    * not intended for public consumption.
    * may contain bugs / incomplete features.
    * do not use unless directed to do so.

    REMOVE THIS and copy/paste README.md or similar.

    ![EmuClassic](https://user-images.githubusercontent.com/56646290/80221765-5e1de080-860b-11ea-93e4-1cae280423b9.png)

name: $(Date:yyyyMMdd).$(BuildID)

#trigger: none
trigger:
  branches:
    include:
    - master
#    - build/*
#    - '*'  # must quote since "*" is a YAML reserved character; we want a string

pr: none
#pr:
#  branches:
#    include:
#    - '*'  # must quote since "*" is a YAML reserved character; we want a string

stages:
- stage: Build
  jobs:
  - job: 'Linux'
    timeoutInMinutes: 360
    strategy:
      maxParallel: 3
      matrix:
        batch1:
          GOAL: targets-group-1
          artifactName: emu1
        batch2:
          GOAL: targets-group-2
          artifactName: emu2
        batch3:
          GOAL: targets-group-rest
          artifactName: emu3

    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      fetchDepth: 50
      persistCredentials: true
    - script: function curl () { command curl --connect-timeout 30 --retry 5 "$@" ; } ;
      displayName: 'improve curl parameters'
    - script: make arm_sdk_install
      displayName: 'Install the build toolchain'
    - script: make $(GOAL) -j2
      displayName: 'Build the Targets'
    - script: mkdir release; cp obj/*.hex release/
      displayName: 'Copy artifacts'
#    - script: |
#        rm -rf obj/*.bin
#        rm -rf obj/*.hex
#      displayName: 'Clean artifacts'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Linux release'
      inputs:
        artifactName: $(artifactName)
        targetPath: '$(System.DefaultWorkingDirectory)/release/'

- stage: Release
  jobs:
  - job: Release

    steps:
    - checkout: self
      clean: true
      fetchDepth: 50
      persistCredentials: true
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'
    - powershell: |
        Write-Output ("##vso[task.setvariable variable=today;]$(Get-Date -Format yyyyMMdd)")
        $myReleaseNotes = [IO.File]::ReadAllText("$(System.DefaultWorkingDirectory)/README.md")

        Write-Output ("##vso[task.setvariable variable=releaseNotes;]$myReleaseNotes.OutString")
        Write-Output "${myReleaseNotes}"
      displayName: 'releaseNotes'
    - task: GitHubReleasePublish@1
      inputs:
        githubEndpoint: '$(endpoint)'
        manuallySetRepository: true
        githubOwner: '$(owner)'
        githubRepositoryName: '$(repoName)'
        #githubTag: '$(Date:yyyyMMdd).$(BuildID)'   #defaults to $(name) and this usually fails variables anyway
        githubReleaseTitle: '$(Build.Repository.Name): $(Build.SourceBranchName) $(today)'
        githubReleaseNotes: |+
          $(releaseNotes)

          <hr>

          #### Repository:
          $(Build.Repository.Name) ([link]($(Build.Repository.Uri)))

          #### Branch:
          $(Build.SourceBranchName) ([link]($(Build.Repository.Uri)/tree/$(Build.SourceBranchName)))

          #### Commit SHA:
          $(Build.SourceVersion) ([link]($(Build.Repository.Uri)/commit/$(Build.SourceVersion)))

          #### Commit Message:
          $(Build.SourceVersionMessage)

          #### Debug:
          Build.SourceBranchName: $(Build.SourceBranchName)
          Build.Repository.Name: $(Build.Repository.Name)
          Build.Repository.ID: $(Build.Repository.ID)
          Build.Repository.Uri: $(Build.Repository.Uri)
          Build.RequestedFor: $(Build.RequestedFor)
          Build.QueuedBy: $(Build.QueuedBy)
        githubReleaseDraft: true              #this will allow hiding until manually unsetting 'draft'
        githubReleasePrerelease: true         #make it a pre-release, we can manually unset also if appropriate
        githubIgnoreAssets: false
        githubReleaseAsset: |
          $(Pipeline.Workspace)/emu**/**
        githubReuseRelease: false
        githubReuseDraftOnly: false
        githubSkipDuplicatedAssets: false
        githubEditRelease: true
        githubDeleteEmptyTag: false
