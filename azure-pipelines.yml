# Builds the emuflight firmware
#
# After building, artifacts are released to a seperate repository.
#
# Azure Pipelines requires the following extensions to be installed:
# - GitHub Tool: https://marketplace.visualstudio.com/items?itemName=marcelo-formentao.github-tools
#
# You'll also need to setup the follwing pipeline variables:
#     "releaseNotes" - This is used to add the release notes in the windows job in the build stage so they can be published as part of the github release in the release stage
#     "endpoint" - The name of the github endpoint link setup in AzDo - setup when linking AzDo and GitHub 'nerdCopter'
#     "owner" - The owner of the repository to release to e.g. nerdCopter
#     "repoName" - The name of the repository to release to e.g. EmuFlight_nerdCopter


variables:
  owner: nerdCopter
  repoName: EmuFlight_nerdRepo
  releaseNotes: not intended for public consumption. this is test of the Microsoft Azure Pipelines build system

name: $(Build.RequestedFor)_$(Build.SourceBranchName)_$(BuildID)

trigger: none

stages:
- stage: Build
  jobs:
  timeoutInMinutes: 180   # 3 hours
  - job: 'Linux'
      strategy:
      maxParallel: 3
      matrix:
        batch1:
          GOAL: targets-group-1
        batch2:
          GOAL: targets-group-2
        batch3:
          GOAL: targets-group-rest
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - script: make arm_sdk_install
      displayName: 'Install the build toolchain'
    - script: make ${GOAL} -j2 || exit $?
      displayName: 'Build the Targets'
    - script: mkdir release; cp obj/*.hex release/
      displayName: 'Copy artifacts'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Linux release'
      inputs:
        artifactName: emuflight
        targetPath: '$(System.DefaultWorkingDirectory)/release/'

- stage: Release
  jobs:
  - job: Release

    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'
    - powershell: Write-Output ("##vso[task.setvariable variable=today;]$(Get-Date -Format yyyyMMdd)")
    - task: GitHubReleasePublish@1
      inputs:
        githubEndpoint: '$(endpoint)'
        manuallySetRepository: true
        githubOwner: '$(owner)'
        githubRepositoryName: '$(repoName)'
        githubTag: $(today).$(Build.Repository.Name).$(Build.SourceBranchName)
        githubReleaseTitle: '$(Build.Repository.Name): $(Build.SourceBranchName) ($(today))'
        githubReleaseNotes: |+
          $(releaseNotes)

          ### Repository:
          $(Build.Repository.Name) ([link]($(Build.Repository.Uri)))

          ### Pull request branch:
          $(Build.SourceBranchName) ([link]($(Build.Repository.Uri)/tree/$(Build.SourceBranchName)))

          ### Author:
          $(Build.RequestedFor)

          ### Latest changeset:
          $(Build.SourceVersion) ([link]($(Build.Repository.Uri)/commit/$(Build.SourceVersion)))

          ### Changes:
          $(Build.SourceVersionMessage)

          ### Debug:
          Build.SourceBranchName
          $(Build.SourceBranchName)
          Build.Repository.Name
          $(Build.Repository.Name)
          Build.Repository.ID
          $(Build.Repository.ID)
          Build.Repository.Uri
          $(Build.Repository.Uri)
          Build.RequestedFor
          $(Build.RequestedFor)
          Build.QueuedBy
          $(Build.QueuedBy)
        githubReleaseDraft: true              #this will allow hiding until manually unsetting 'draft'
        githubReleasePrerelease: true         #make it a pre-release, we can manually unset also if appropriate
        githubIgnoreAssets: false
        githubReleaseAsset: |
          $(Pipeline.Workspace)/emuflight/**
        githubReuseRelease: true
        githubReuseDraftOnly: false
        githubSkipDuplicatedAssets: false
        githubEditRelease: true
        githubDeleteEmptyTag: false
